// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category {
  id              String       @id @default(cuid()) @map("_id")
  slug            String       @unique
  title           String?
  img             String?
  views           Int            @default(0)
  posts           Post[]       // One-to-many relation
  postCategories  PostCategory[] // Many-to-many relation
}

// New model for many-to-many relation between Post and Category
model PostCategory {
  id            String   @id @default(cuid()) @map("_id")
  postId        String
  post          Post     @relation(fields: [postId], references: [id])
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])

  @@map("postCategories")
}

model Post {
  id              String         @id @default(cuid()) @map("_id")
  createdAt       DateTime       @default(now())
  slug            String         @unique
  title           String
  desc            String
  img             String?
  views           Int            @default(0)
  catSlug         String
  cat             Category       @relation(fields: [catSlug], references: [slug]) // Rename relation to `cat`
  userEmail       String
  user            User           @relation(fields: [userEmail], references: [email])
  comments        Comment[]
  postCategories  PostCategory[] // Many-to-many relation
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}
